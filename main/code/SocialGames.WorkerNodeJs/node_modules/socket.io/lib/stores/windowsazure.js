
/*!
 * socket.io-node
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var crypto = require('crypto')
  , Store = require('../store');

/**
 * Exports the constructor.
 */

exports = module.exports = WindowsAzure;
WindowsAzure.Client = Client;

/**
 * Memory store
 *
 * @api public
 */

function WindowsAzure (opts) {
  opts = opts || {};

  // node id to uniquely identify this node
  var nodeId = opts.nodeId || function () {
    // by default, we generate a random id 
    return Math.abs(Math.random() * Math.random() * Date.now() | 0);
  };

  this.nodeId = nodeId();


  Store.call(this, opts);
};

/**
 * Inherits from Store.
 */

WindowsAzure.prototype.__proto__ = Store.prototype;

/**
 * Publishes a message.
 *
 * @api private
 */

WindowsAzure.prototype.publish = function () { };

/**
 * Subscribes to a channel
 *
 * @api private
 */

WindowsAzure.prototype.subscribe = function () { };

/**
 * Unsubscribes
 *
 * @api private
 */

WindowsAzure.prototype.unsubscribe = function () { };

/**
 * Client constructor
 *
 * @api private
 */

function Client () {
  Store.Client.apply(this, arguments);
};

/**
 * Inherits from Store.Client
 */

Client.prototype.__proto__ = Store.Client;

/**
 * Gets a key
 *
 * @api public
 */

Client.prototype.get = function (key, fn) {
  fn(null, this.data[key] === undefined ? null : this.data[key]);
  return this;
};

/**
 * Sets a key
 *
 * @api public
 */

Client.prototype.set = function (key, value, fn) {
  this.data[key] = value;
  fn && fn(null);
  return this;
};

/**
 * Has a key
 *
 * @api public
 */

Client.prototype.has = function (key, fn) {
  fn(null, key in this.data);
};

/**
 * Deletes a key
 *
 * @api public
 */

Client.prototype.del = function (key, fn) {
  delete this.data[key];
  fn && fn(null);
  return this;
};

/**
 * Destroys the client.
 *
 * @param {Number} number of seconds to expire data
 * @api private
 */

Client.prototype.destroy = function (expiration) {
  if ('number' != typeof expiration) {
    this.data = {};
  } else {
    var self = this;

    setTimeout(function () {
      self.data = {};
    }, expiration * 1000);
  }

  return this;
};

var TableStorage, crypto, http, httpclientpool, querystring, sax, sys;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
sys = require('sys');
crypto = require('crypto');
http = require('http');
sax = require('sax');
querystring = require('querystring');
httpclientpool = require('httpclientpool');
TableStorage = (function() {
  function TableStorage(account, key) {
    this.account = account;
    this.key = key;
    this.clientpool = new httpclientpool.HttpClientPool();
  }
  TableStorage.prototype._doOperation = function(method, path, query, data, callback, errCallback) {
    var dateString, headers, req, reqpath;
    data = data || '';
    if (data instanceof Object) {
      data = this.atomSerialize(data);
    }
    dateString = new Date().toGMTString();
    reqpath = "/" + path;
    if (query != null) {
      reqpath += "?" + (querystring.stringify(query));
    }
    headers = {
      'host': "" + this.account + ".table.core.windows.net",
      'Authorization': ("SharedKeyLite " + this.account + ":") + crypto.createHmac('sha256', new Buffer(this.key, 'base64').toString('binary')).update(new Buffer("" + dateString + "\n/" + this.account + "/" + path, 'utf8')).digest('base64'),
      'MaxDataServiceVersion': '2.0;NetFx',
      'Accept': 'application/atom+xml,application/xml',
      'Content-Type': 'application/atom+xml',
      'x-ms-version': '2009-09-19',
      'x-ms-date': dateString,
      'Content-Length': data.length,
      'Connection': 'Keep-Alive'
    };
    if (method.toLowerCase() === 'put' || method.toLowerCase() === 'delete') {
      headers['If-Match'] = '*';
    }
    if (this.proxyServer != null) {
      req = this.clientpool.request(this.proxyPort, this.proxyServer, true, errCallback, method, reqpath, headers);
    } else {
      req = this.clientpool.request(80, "" + this.account + ".table.core.windows.net", true, errCallback, method, reqpath, headers);
    }
    req.end(data);
    if (callback != null) {
      return req.on('response', callback);
    }
  };
  TableStorage.prototype.createTable = function(table, callback) {
    return this.insert('Tables', {
      'TableName': table
    }, callback);
  };
  TableStorage.prototype.atomSerialize = function(o) {
    var name, ret, type, value;
    ret = '<?xml version="1.0" encoding="utf-8" standalone="yes"?>\n<entry xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xmlns="http://www.w3.org/2005/Atom">\n<content type="application/xml">\n    <m:properties>\n';
    for (name in o) {
      value = o[name];
      switch (typeof value) {
        case 'string':
          type = 'Edm.String';
          value = value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
          break;
        case 'boolean':
          type = 'Edm.Boolean';
          break;
        case 'number':
          type = Math.round(value) === value ? 'Edm.Int64' : 'Edm.Double';
          break;
        case 'object':
          if (value instanceof Date) {
            type = 'Edm.DateTime';
            value = JSON.stringify(value).slice(1, -1);
          } else {
            continue;
          }
          break;
        default:
          continue;
      }
      if (name === 'PartitionKey' || name === 'RowKey') {
        type = 'Edm.String';
      }
      ret += "        <d:" + name + " m:type=\"" + type + "\">" + value + "</d:" + name + ">\n";
    }
    ret += '    </m:properties>\n</content>\n</entry>';
    return ret;
  };
  TableStorage.prototype.insert = function(table, object, callback, errCallback) {
    return this._doOperation('POST', table, null, object, callback, errCallback);
  };
  TableStorage.prototype.update = function(table, object, callback) {
    return this._doOperation('PUT', "" + table + "(PartitionKey='" + object.PartitionKey + "',RowKey='" + object.RowKey + "')", null, object, callback);
  };
  TableStorage.prototype["delete"] = function(table, partitionKey, rowKey, callback) {
    return this._doOperation('DELETE', "" + table + "(PartitionKey='" + partitionKey + "',RowKey='" + rowKey + "')", null, null, callback);
  };
  TableStorage.prototype.query = function(table, queryParams, callback, errCallback) {
    var starttime;
    starttime = new Date().getTime();
    return this._doOperation('GET', "" + table + "()", queryParams, null, __bind(function(response) {
      var current_entity, current_property, current_property_type, entities, nextpk, nextrk, parser;
      if (response.statusCode !== 200) {
        if (callback != null) {
          return errCallback(response);
        } else {
          return;
        }
      }
      nextpk = response.headers['x-ms-continuation-nextpartitionkey'];
      nextrk = response.headers['x-ms-continuation-nextrowkey'];
      response.setEncoding('utf8');
      parser = sax.parser(true);
      entities = [];
      current_entity = void 0;
      current_property = void 0;
      current_property_type = void 0;
      parser.onerror = function(e) {
        return errCallback(e);
      };
      parser.onopentag = function(tag) {
        if (tag.name === 'm:properties') {
          if (current_entity != null) {
            entities.push(current_entity);
          }
          return current_entity = {};
        } else if (tag.name.substring(0, 2) === 'd:') {
          current_property = tag.name.substring(2);
          current_property_type = tag.attributes['m:type'];
          return current_entity[current_property] = '';
        }
      };
      parser.onclosetag = function() {
        return current_property = void 0;
      };
      parser.ontext = function(t) {
        if (current_property != null) {
          return current_entity[current_property] = (function() {
            switch (current_property_type) {
              case '':
                return t || '';
              case 'Edm.DateTime':
                return JSON.parse("\"" + t + "\"");
              case 'Edm.Boolean':
                return t === 'true';
              case 'Edm.Int32':
                return parseInt(t);
              case 'Edm.Double':
                return parseDouble(t);
              default:
                return t;
            }
          })();
        }
      };
      response.on('data', function(chunk) {
        return parser.write(chunk);
      });
      return response.on('end', __bind(function() {
        parser.close();
        if (current_entity != null) {
          entities.push(current_entity);
        }
        if (nextpk != null) {
          queryParams = queryParams || {};
          queryParams['NextPartitionKey'] = nextpk;
          if (nextrk != null) {
            queryParams['NextRowKey'] = nextrk;
          } else {
            delete queryParams['NextRowKey'];
          }
          return this.query(table, queryParams, function(entities2) {
            return callback(entities.concat(entities2));
          });
        } else {
          return callback(entities);
        }
      }, this));
    }, this), errCallback);
  };
  return TableStorage;
})();
exports.TableStorage = TableStorage;
